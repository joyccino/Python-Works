{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TitanicChallengeMoon_수빈.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "aq0yWaa10XUW",
        "outputId": "39ca5669-32f3-40d1-cd3d-648d212a70e8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ugdUkokVGIya"
      },
      "source": [
        "Manav Sehgal 데이터 사이언스 솔루션 책 작가님의 workflow 를 따라해보며 부가 설명을 번역하고 추가 주석을 달았습니다.\n",
        "<br>\n",
        "튜토리얼 링크: https://www.kaggle.com/startupsci/titanic-data-science-solutions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ZQm797K6jfC"
      },
      "source": [
        "#1 Import necessary modules for titanic challenge"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mLuURRGvUEdK"
      },
      "source": [
        "# data analysis and wrangling\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import random as rnd\n",
        "\n",
        "# visualization\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "# machine learning\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC, LinearSVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import Perceptron\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ys6fMyPt6xVK"
      },
      "source": [
        "#2 Acquire the data\n",
        "prepare the datasets(train.csv, test.csv) within your google drive.\n",
        "<br>\n",
        "Don't forget to mount your google drive folder to colab!\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a3km19mM5OIs"
      },
      "source": [
        "#Acquire data\n",
        "train_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/2020-camp/Part2. Tensorflow 2.0Pytorch 프레임워크/1. 학생용-Typing/homworks/titanic/train.csv')\n",
        "test_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/2020-camp/Part2. Tensorflow 2.0Pytorch 프레임워크/1. 학생용-Typing/homworks/titanic/test.csv')\n",
        "combine = [train_df, test_df]"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kyg7DJbT8JJn",
        "outputId": "47ea9f26-138b-4dca-f6a4-fed84ac5f61a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "len(combine)"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RRi7X7VIt5OW",
        "outputId": "24dc2e97-76ad-4830-9bcc-617b8976684b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        }
      },
      "source": [
        "combine[0] == train_df"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  Name  ...  Ticket  Fare  Cabin  Embarked\n",
              "0           True      True    True  True  ...    True  True  False      True\n",
              "1           True      True    True  True  ...    True  True   True      True\n",
              "2           True      True    True  True  ...    True  True  False      True\n",
              "3           True      True    True  True  ...    True  True   True      True\n",
              "4           True      True    True  True  ...    True  True  False      True\n",
              "..           ...       ...     ...   ...  ...     ...   ...    ...       ...\n",
              "886         True      True    True  True  ...    True  True  False      True\n",
              "887         True      True    True  True  ...    True  True   True      True\n",
              "888         True      True    True  True  ...    True  True  False      True\n",
              "889         True      True    True  True  ...    True  True   True      True\n",
              "890         True      True    True  True  ...    True  True  False      True\n",
              "\n",
              "[891 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BzNgSjn_8lF7",
        "outputId": "eee389af-84a3-4b69-e5c8-51c31bbd7dca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 563
        }
      },
      "source": [
        "combine[0]"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0              1         0       3  ...   7.2500   NaN         S\n",
              "1              2         1       1  ...  71.2833   C85         C\n",
              "2              3         1       3  ...   7.9250   NaN         S\n",
              "3              4         1       1  ...  53.1000  C123         S\n",
              "4              5         0       3  ...   8.0500   NaN         S\n",
              "..           ...       ...     ...  ...      ...   ...       ...\n",
              "886          887         0       2  ...  13.0000   NaN         S\n",
              "887          888         1       1  ...  30.0000   B42         S\n",
              "888          889         0       3  ...  23.4500   NaN         S\n",
              "889          890         1       1  ...  30.0000  C148         C\n",
              "890          891         0       3  ...   7.7500   NaN         Q\n",
              "\n",
              "[891 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yX26dELq6dMQ"
      },
      "source": [
        "#3 Analyze by describing the data\n",
        "* 데이터를 관찰하고 유용해 보이는 feature 를 뽑아보자.\n",
        "<br>\n",
        "* feature 를 뽑은 후에는 classification/categorisation 작업이 들어갈것."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZoViZor76XTh",
        "outputId": "849e0106-af4e-46f4-fff6-5de98216cbab",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(train_df.columns)\n",
        "print(train_df.columns.values)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
            "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
            "      dtype='object')\n",
            "['PassengerId' 'Survived' 'Pclass' 'Name' 'Sex' 'Age' 'SibSp' 'Parch'\n",
            " 'Ticket' 'Fare' 'Cabin' 'Embarked']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3I2TbG7G79bI"
      },
      "source": [
        "#여기서..Categorical VS Numerical data로 분류하기.\n",
        "\n",
        "이후에 시각화를 할때 적절한 plot 을 찾기 쉽도록 분리하는 듯. 일단 정의를 해보자.\n",
        "<br>\n",
        "* Categorical = nominal(명칭인 것), ordinal(순서적인 것), ratio(비율), or interval(간격) 베이스인것\n",
        "<br>\n",
        "   Examples: Survived, Sex, and Embarked. Ordinal: Pclass.\n",
        "<br>\n",
        "* Numerical = values discrete(이산값? 분포된 값들), continuous or timeseries 베이스인것들.\n",
        "<br>\n",
        "   Examples = Age, Fare. Discrete: SibSp (Number of Siblings/Spouses Aboard.), Parch(Number of Parents/Children Aboard.).\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NLHyYinS7opI",
        "outputId": "6d08adcf-01b1-48c2-bf9d-66124cb17206",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        }
      },
      "source": [
        "# preview the data\n",
        "train_df.head() #처음 5개 row를 표시해주기"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n",
              "0            1         0       3  ...   7.2500   NaN         S\n",
              "1            2         1       1  ...  71.2833   C85         C\n",
              "2            3         1       3  ...   7.9250   NaN         S\n",
              "3            4         1       1  ...  53.1000  C123         S\n",
              "4            5         0       3  ...   8.0500   NaN         S\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P5CCcYpw-cqD"
      },
      "source": [
        "#숫자와 영문이 섞인 데이터타입이 있는지?\n",
        "-ㅇㅇ.\n",
        "<br>티켓, 객실.\n",
        "#에러나 오타를 포함할 가능성이 있는 feature 는?\n",
        "-탑승객 이름이겠지. (오타, 별칭, 제마다의 표현 방법이 있으니.)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zCrWGfJd5Vmx",
        "outputId": "b32934ce-2750-495c-e612-b3fa83dbdee9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        }
      },
      "source": [
        "train_df.tail() #뒤쪽 5개 row 표시해보기"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.00</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.45</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.00</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.75</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     PassengerId  Survived  Pclass  ...   Fare Cabin  Embarked\n",
              "886          887         0       2  ...  13.00   NaN         S\n",
              "887          888         1       1  ...  30.00   B42         S\n",
              "888          889         0       3  ...  23.45   NaN         S\n",
              "889          890         1       1  ...  30.00  C148         C\n",
              "890          891         0       3  ...   7.75   NaN         Q\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a84Dzm80_dK6"
      },
      "source": [
        "#빈 칸이나 null 값, 빈 값을 포함할 수 있는 feature 를 발견했는지?\n",
        "-그렇다면 이후에 정정(correcting) 작업을 해주어야 한다.\n",
        "<br>\n",
        "-트레이닝 데이터셋에 Cabin > Age > Embarked features 순으로 null values 가 포함된것 확인하기.\n",
        "<br>\n",
        "-테스트 데이터 셋의 경우 Cabin(객실) 부터 Age 까지의 데이터는 모두 완성되지 못한것 확인.\n",
        "\n",
        "#feature들에 어떤 데이터 타입들이 존재하는지?\n",
        "-나중에 데이터 전처리를 할때 필요한 고민.(알고리즘에 따라 다를 수 있겠지만 모델에 넣으려면 문자는 numeric value로 바꾸어 주어야 한다.)\n",
        "<br>\n",
        "-train 데이터: 7개의 feature 들이 int/floats\n",
        "<br>\n",
        "-test 데이터에는 6개 feature 들이 int/floats String(object)가 5개."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n6iNTgM1_Vn5",
        "outputId": "f4fdf016-ee99-407d-b30e-cb7c09e385e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "train_df.info()\n",
        "print('_'*40)\n",
        "test_df.info()"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n",
            "________________________________________\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 418 entries, 0 to 417\n",
            "Data columns (total 11 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  418 non-null    int64  \n",
            " 1   Pclass       418 non-null    int64  \n",
            " 2   Name         418 non-null    object \n",
            " 3   Sex          418 non-null    object \n",
            " 4   Age          332 non-null    float64\n",
            " 5   SibSp        418 non-null    int64  \n",
            " 6   Parch        418 non-null    int64  \n",
            " 7   Ticket       418 non-null    object \n",
            " 8   Fare         417 non-null    float64\n",
            " 9   Cabin        91 non-null     object \n",
            " 10  Embarked     418 non-null    object \n",
            "dtypes: float64(2), int64(4), object(5)\n",
            "memory usage: 36.0+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UIY5Y9BgByxI"
      },
      "source": [
        "# 샘플의 numerical feature 값의 분포도 확인하기.\n",
        "- 패턴에 영향을 미치는 significant한 값들을 찾아보는것이 문제 해결을 위한 초기 인사이트 세우는데에 큰 도움 됨.\n",
        "<br>\n",
        "- 총 샘플은 891 이고, 타이타닉에 실제 탑승한 탑승객 (2,224) 인원수의 40% 이다.\n",
        "<br>\n",
        "- Survived 는 0, 1 값을 가지는 카테고리컬 feature 이다.\n",
        "<br>\n",
        "- 38%의 샘플탑승자(실제 전체 생존률은 32% 이다)가 살아 남았다.\n",
        "<br>\n",
        "- 75%가 넘는 대부분의 탑승객은 부모님 혹은 자녀와 함께 탑승하지 않았다.\n",
        "<br>\n",
        "- 거의 30%의 탑승객이 siblings(혈육메이트) 혹은 배우자와 함께 탑승하였다.\n",
        "<br>\n",
        "- 지불한 운임값은 격차가 컸으며, 1%미만의 승객은 $512(아마도 퍼스트 클래스)를 지불하였다. (이는 3등석 티켓값의 약 3배이다.)\n",
        "<br>\n",
        "- 65-80 세 범위의 노인 승객은 1% 미만으로 거의 없었다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GYcCdqhYBVo5",
        "outputId": "7276e36b-0040-4b2c-8bd2-b74d5817d231",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        }
      },
      "source": [
        "train_df.describe()\n",
        " # describe() 함수는 DataFrame의 계산 가능한 값들에 대한 다양한 계산 값을 보여준다.\n",
        "\n",
        "# Review survived rate using `percentiles=[.61, .62]` knowing our problem description mentions 38% survival rate.\n",
        "# Review Parch distribution using `percentiles=[.75, .8]`\n",
        "# SibSp distribution `[.68, .69]`\n",
        "# Age and Fare `[.1, .2, .3, .4, .5, .6, .7, .8, .9, .99]`"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n",
              "count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n",
              "mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n",
              "std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n",
              "min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n",
              "50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n",
              "75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n",
              "max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n",
              "\n",
              "[8 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4d3dz9nzEPN5"
      },
      "source": [
        "# 샘플의 categorical feature 값의 분포도 확인하기.\n",
        "- 탑승객의 이름중 겹치는 이름은 없었다. (unique 한 값.)\n",
        "<br>\n",
        "- Sex: 샘플의 65%가 남성.\n",
        "Sex variable as two possible values(top=male, freq=577/count=891).\n",
        "<br>\n",
        "- 객실은 겹칠 수 있다. (한방에 가족이나 친구 단위로 같이 묵을 수 있으니)\n",
        "<br>\n",
        "- Embarks는 샘플들이 승선한 항구명으로, 세 value를 가질수 있다: (C : Cherbourg, Q : Queenstown, S : Southampton) S 항구에서 가장 많은 승선자가 나왔다. (top=S)\n",
        "<br>\n",
        "- 티켓의 고유넘버는 높은 비율로(22%) 값이 겹쳤다. (왜지...???)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OngGSC50BASp",
        "outputId": "5acf0c5c-a924-4542-a52f-60f57d5a4002",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "train_df['Name']"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0                                Braund, Mr. Owen Harris\n",
              "1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n",
              "2                                 Heikkinen, Miss. Laina\n",
              "3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n",
              "4                               Allen, Mr. William Henry\n",
              "                             ...                        \n",
              "886                                Montvila, Rev. Juozas\n",
              "887                         Graham, Miss. Margaret Edith\n",
              "888             Johnston, Miss. Catherine Helen \"Carrie\"\n",
              "889                                Behr, Mr. Karl Howell\n",
              "890                                  Dooley, Mr. Patrick\n",
              "Name: Name, Length: 891, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IONUuqfiD4uC",
        "outputId": "c2654f6e-3448-43e4-df6e-73e9ece7b9ba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 168
        }
      },
      "source": [
        "train_df.describe(include=['O'])"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891</td>\n",
              "      <td>891</td>\n",
              "      <td>891</td>\n",
              "      <td>204</td>\n",
              "      <td>889</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>891</td>\n",
              "      <td>2</td>\n",
              "      <td>681</td>\n",
              "      <td>147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>Perreault, Miss. Anne</td>\n",
              "      <td>male</td>\n",
              "      <td>347082</td>\n",
              "      <td>G6</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>577</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>644</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                         Name   Sex  Ticket Cabin Embarked\n",
              "count                     891   891     891   204      889\n",
              "unique                    891     2     681   147        3\n",
              "top     Perreault, Miss. Anne  male  347082    G6        S\n",
              "freq                        1   577       7     4      644"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j1RNKSDhGmbs"
      },
      "source": [
        "#4 데이터 분석을 통해 추측 시작.\n",
        "- 지금까지 진행한 데이터 분석을 통해 추측을 몇가지 내릴 수 있다. 각자의 추측들을 토대로 어떤 행동을 취하기 전에 validate 하는 작업을 추가로 거쳐야 한다.\n",
        "<br>\n",
        "- Correlating. (관련성 찾기)\n",
        "<br>\n",
        "우리가 찾은 feature 들이 과연 생존률에 얼마나 영향을 줄지 알아내는것이 포인트이다.\n",
        "<br>\n",
        "추측 1: Age는 생존률에 확실한 영향을 미쳤다.\n",
        "<br>\n",
        "추측 2: Embarked 또한 생존률에 큰 영향을 준 것으로 보이므로.... null 값인 Embarked features를 메꾸어야 한다.\n",
        "<br>\n",
        "- Completing. (엉뚱한 값들인 outliers 방지하기)\n",
        "<br>\n",
        "- Correcting.\n",
        "<br>\n",
        "티켓 고유번호는 drop 해도 상관 없겠다.\n",
        "<br>\n",
        "이유1: 중복이 너무 많이 되고 (22%)\n",
        "<br>\n",
        "이유2: 티켓번호와 생존률의 상관관계 x\n",
        "<br>\n",
        "객실 정보도 drop 해도 되겠다.\n",
        "<br>\n",
        "이유3: 다른 features 중에 제일 미완성인데다 트레이닝/테스트 데이터쪽 모두 Null 값이 너무 많이 포함되어있다. (진지)\n",
        "<br>\n",
        "PassengerId 도 drop 하자. 생존률에 큰 공헌을 하지 않았으므로.\n",
        "<br>\n",
        "Name 은 비교적 비표준적으로 작성 되었으므로 서바이벌에 큰 공헌을 하지 못했을것이다. 그러므로 drop 하도록 하자.\n",
        "<br>\n",
        "- Creating.\n",
        "Parch 와 SibSp를 베이스로 Family 라는 새로운 feature 를 만들어보자. -> 이제 가족 단위로 탑승객들의 수를 알 수 있다.\n",
        "<br>\n",
        "- Name 을 이용해 Title(Dr, Professor, Dame 등의 지위)이라는 새 feature 만듦.\n",
        "<br>\n",
        "- Age 이용해 새 Age bands(나이집단) feature 만들어 묶어보자. (continous numerical -> ordinal categorical feature)\n",
        "<br>\n",
        "- fare(지불한 운임비용) range 도 만들어 보았다. 소득수준에 따른 생존률 유추 유효화에 도움될 듯.\n",
        "<br>\n",
        "Classifying.\n",
        "<br>\n",
        "위에 정리한 추측에 우리가 지금까지 추가적으로 해준 작업을을 토대로 추가 추측을 내려보자. \n",
        "-여성일수록 생존 확률이 높았다.\n",
        "-Children (Age <? ) 일수록 생존 확률이 높았다.\n",
        "-Upper-class (고위층) 일 수록 생존 확률이 높았다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3AMSEUPkLt3J"
      },
      "source": [
        "#5 features을 토대로 내린 추측 위주로 분석하기. (pivoting features)\n",
        "\n",
        "- features 들을 서로에 대해 pivoting 해주면서 correlation 분석이 가능한데...\n",
        "<br>\n",
        "일단 여기서는 널값이나 empty values 를 가지지 않는 feature((Sex), ordinal (Pclass) or discrete (SibSp, Parch) type.) 들에 대해서만 진행할것.\n",
        "<br>\n",
        "- 생존률과 높은 상관관계 (>0.5)를 보인 Pclass=1 (고위층)...\n",
        "<br>\n",
        "이 양상을 우리의 모델에 포함시켜 보자.\n",
        "<br>\n",
        "- Sex: 여성의 생존률이 높았는데 확률이 무려 74%.\n",
        "<br>\n",
        "- SibSp and Parch (family): 이 features 들은 특정한 값에 대해 생존률과 상관관계가 0이었음.\n",
        "가족 단위로 연관성을 찾기 보다는 개개인으로 dealing 하는것이 바람직하다는 증거.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UBgtbu98ERlQ",
        "outputId": "96a3b51e-963c-4648-e042-9078be31fcff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "#계급? 에 따른 생존확률\n",
        "train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.629630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.472826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.242363</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Pclass  Survived\n",
              "0       1  0.629630\n",
              "1       2  0.472826\n",
              "2       3  0.242363"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nl7o5MkhHAjl",
        "outputId": "53927439-c7ff-43d9-f307-34b6fc5ed89c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 138
        }
      },
      "source": [
        "train_df[['Pclass', 'Survived']].groupby(['Pclass'],  as_index=False).mean().sort_values(by='Survived', ascending=True)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.242363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.472826</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.629630</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Pclass  Survived\n",
              "2       3  0.242363\n",
              "1       2  0.472826\n",
              "0       1  0.629630"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uszVGLVpNmgp",
        "outputId": "86a31c34-e1fc-47f0-d3e7-1bb2e55568f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        }
      },
      "source": [
        "#성별에 따른 생존확률\n",
        "train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>0.742038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>0.188908</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      Sex  Survived\n",
              "0  female  0.742038\n",
              "1    male  0.188908"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RGBIamTDOKSq",
        "outputId": "4254ceb0-d69b-4769-e7f3-5c177844de6f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        }
      },
      "source": [
        "#가족에 대한 연관성\n",
        "train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Parch</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0.550847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.343658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>0.200000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>6</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Parch  Survived\n",
              "3      3  0.600000\n",
              "1      1  0.550847\n",
              "2      2  0.500000\n",
              "0      0  0.343658\n",
              "5      5  0.200000\n",
              "4      4  0.000000\n",
              "6      6  0.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UbTkHLTVOREM"
      },
      "source": [
        "# 6 시각화를 통해 데이터 분석을 본격적으로 해보자.\n",
        "이제 앞서 내린 추측들을 confirm 하기 전에 데이터 분석을 위한 시각화 할 것.\n",
        "\n",
        "- numerical features 과 생존 확률의 상관관계 이해하기.\n",
        "- age banding 같은 연속성이 있는 variable를 시각화하여 유용한 패턴 뽑아내기위해 히스토그램을 사용할것. \n",
        "- 히스토그램으로 분포도(distribution)를 표현가능.\n",
        "- x축: 탑승객 y축: 생존률\n",
        "\n",
        "#Observations.\n",
        "- Infants (Age <=4) 일수록 생존률이 높다.\n",
        "- 최고령자(Age = 80) 인 탑승객이 생존했다.\n",
        "- 다수의 15-25세 그룹이 사망했다...\n",
        "- 대부분의 탑승객 연령대는 15-35 이다.\n",
        "\n",
        "#Decisions.\n",
        "- 위의 관측+분석을 통해 우리의 추측들을 workflowe 의 다음 단계인 decisions로 가져가볼 수 있겠다.\n",
        "- 결정 1: 모델 트레이닝에 Age 를 고려해야 한다.\n",
        "- 결정 2: Age feature 중 Null 값이 있다면 complete 해야 한다.\n",
        "- 연령대는 묶어서 사용하자. (creating의 #3번째 부분에서 만들어낸 새 feature)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WpOtQPUhOMhK",
        "outputId": "f51bc4e7-9e9b-42c7-fbfe-bb1f7829f908",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        }
      },
      "source": [
        "g = sns.FacetGrid(train_df, col='Survived')\n",
        "g.map(plt.hist, 'Age', bins=20)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
            "  keep = (tmp_a >= first_edge)\n",
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
            "  keep &= (tmp_a <= last_edge)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f9f58c16e80>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAADQCAYAAABStPXYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARIUlEQVR4nO3df6zddX3H8edLyo8NHFC86TrAlQ0CQR0gHYKom4BbVSJkVgZhpiYszRLccGq0zD+mmVsgWVQyh1kjzo45LaKMpi4iFtjUOLQoIgUVRJAyoAUBxSxq4b0/zrdy1972nvaec+/n3PN8JCfn+/Oc9/3SN+/z+ZzP+XxTVUiS1JrnzXUAkiRNxQIlSWqSBUqS1CQLlCSpSRYoSVKTLFCSpCZZoGZJkvck2ZTkjiS3J3nZgF73DUlWDei1nh7Aa+yfZG2Se5PcmmTJzCPTuBijPHlVkm8k2ZZk+SDimo8WzHUA4yDJacDZwEur6mdJXgDstwfnL6iqbVPtq6p1wLrBRDoQFwFPVNXRSc4HLgf+eI5j0ggYszz5IfAW4J1zHEfTbEHNjsXAY1X1M4Cqeqyq/gcgyf1dIpJkaZJbuuX3Jrk6yVeAq5P8d5IXbX/BJLd0x78lyYeTHJzkgSTP6/YfmOTBJPsm+e0kn09yW5IvJTmuO+aoJF9N8u0k7x/Q33oOsKZbvhY4M0kG9Nqa38YmT6rq/qq6A3h2EK83X1mgZscXgCOTfC/JlUl+r8/zjgfOqqoLgLXAeQBJFgOLq2rj9gOr6ingdmD7a58N3FBVvwBWA39eVSfT+8R2ZXfMFcBHquolwMO7CqJL1tuneJw1xeGHAw92MW0DngIO6/Pv1XgbpzxRH+zimwVV9XSSk4FXAq8G1iZZVVUfn+bUdVX1v93yNfQS+K/pJeC1Uxy/ll532s3A+cCVSQ4CXg58elJDZv/u+XTgjd3y1fS646aK/5XTxCnNmHmiHVmgZklVPQPcAtyS5NvACuDjwDaea8kesMNpP510/kNJHk/yO/SS68+meJt1wN8lWQicDNwEHAg8WVUn7iq06WJP8iXg+VPsemdVfXGHbQ8BRwKbkywADgYen+49JBirPFEf7OKbBUmOTXLMpE0nAg90y/fTSxJ47lParqwF3gUc3PVf/z9V9TTwdXpdEuur6pmq+jHwgyRv6mJJkhO6U75C7xMkwIW7etOqemVVnTjFY6qkW0fvfyoAy4GbyhmJ1YcxyxP1wQI1Ow4C1iS5K8kd9PrM39vtex9wRZKNwDPTvM619BLlmt0csxb4k+55uwuBi5J8C9hEbyADwCXAxd0n1cP7/3N26yrgsCT3Am8HBjK0V2NhbPIkye8m2Qy8CfinJJsG8brzTfxwK0lqkS0oSVKTLFCSpCZZoCRJTbJASZKaNKsFatmyZUXv9wQ+fIzDY6+YJz7G8DGlWS1Qjz322Gy+nTSSzBOpxy4+SVKTLFCSpCZZoCRJTbJASZKaZIGSJDXJAiVJapL3gxqwJas+t9v991/2+lmKRJJGmy0oSVKTLFCSpCZZoCRJTbJASZKa5CCJWba7QRQOoJCk59iCkiQ1yQIlSWqSBUqS1CQLlCSpSRYoSVKTLFCSpCb1Ncw8yf3AT4BngG1VtTTJQmAtsAS4Hzivqp4YTpizx7n0JKkNe9KCenVVnVhVS7v1VcCGqjoG2NCtS5I0EDPp4jsHWNMtrwHOnXk4kiT19FugCvhCktuSrOy2Laqqh7vlR4BFU52YZGWSjUk2bt26dYbhSvOTeSLtrN8C9YqqeinwWuDiJK+avLOqil4R20lVra6qpVW1dGJiYmbRSvOUeSLtrK8CVVUPdc9bgOuAU4BHkywG6J63DCtISdL4mbZAJTkwyfO3LwN/ANwJrANWdIetAK4fVpCSpPHTzzDzRcB1SbYf/29V9fkkXweuSXIR8ABw3vDClCSNm2kLVFXdB5wwxfbHgTOHEVTLpvudlCRpMJxJQpLUJAuUJKlJFihJUpMsUJKkJlmgJElNskBJkppkgZIkNckCJUlqkgVKktQkC5QkqUkWKElSkyxQkqQmWaAkSU2yQEmSmmSBkiQ1yQIlSWpS3wUqyT5Jvplkfbd+VJJbk9ybZG2S/YYXpiRp3OxJC+oS4O5J65cDH6yqo4EngIsGGZgkabz1VaCSHAG8Hvhotx7gDODa7pA1wLnDCFCSNJ76bUF9CHgX8Gy3fhjwZFVt69Y3A4dPdWKSlUk2Jtm4devWGQUrzVfmibSzaQtUkrOBLVV12968QVWtrqqlVbV0YmJib15CmvfME2lnC/o45nTgDUleBxwA/BpwBXBIkgVdK+oI4KHhhSlJGjfTtqCq6tKqOqKqlgDnAzdV1YXAzcDy7rAVwPVDi1KSNHZm8juodwNvT3Ivve+krhpMSJIk9dfF90tVdQtwS7d8H3DK4EOSJMmZJCRJjbJASZKaZIGSJDXJAiVJatIeDZKQpD21ZNXndrv//steP0uRaNTYgpIkNckCJUlqkl18kpo3XTdhP+xKHD22oCRJTbIFNUL8slnSOLEFJUlqkgVKktQkC5QkqUkWKElSkyxQkqQmWaAkSU2atkAlOSDJ15J8K8mmJO/rth+V5NYk9yZZm2S/4YcrSRoX/bSgfgacUVUnACcCy5KcClwOfLCqjgaeAC4aXpiSpHEzbYGqnqe71X27RwFnANd229cA5w4lQknSWOrrO6gk+yS5HdgC3Ah8H3iyqrZ1h2wGDh9OiJKkcdTXVEdV9QxwYpJDgOuA4/p9gyQrgZUAL3zhC/cmxrExiAkxNZrGOU/8d69d2aNRfFX1JHAzcBpwSJLtBe4I4KFdnLO6qpZW1dKJiYkZBSvNV+aJtLN+RvFNdC0nkvwK8BrgbnqFanl32Arg+mEFKUkaP/108S0G1iTZh15Bu6aq1ie5C/hUkvcD3wSuGmKckqQxM22Bqqo7gJOm2H4fcMowgpIkyftBzSPeL0rSfOJUR5KkJtmCkkZQK61lh4hrmGxBSZKaZIGSJDXJAiVJapIFSpLUJAuUJKlJFihJUpMsUJKkJlmgJElNskBJkprkTBL6pVZmJ5AksAUlSWqUBUqS1CQLlCSpSRYoSVKTpi1QSY5McnOSu5JsSnJJt31hkhuT3NM9Hzr8cCVJ46KfFtQ24B1VdTxwKnBxkuOBVcCGqjoG2NCtS5I0ENMWqKp6uKq+0S3/BLgbOBw4B1jTHbYGOHdYQUqSxs8efQeVZAlwEnArsKiqHu52PQIs2sU5K5NsTLJx69atMwhVmr/ME2lnfReoJAcBnwHeVlU/nryvqgqoqc6rqtVVtbSqlk5MTMwoWGm+Mk+knfVVoJLsS684faKqPtttfjTJ4m7/YmDLcEKUJI2jfkbxBbgKuLuqPjBp1zpgRbe8Arh+8OFJksZVP3PxnQ68Gfh2ktu7bX8FXAZck+Qi4AHgvOGEKEkaR9MWqKr6MpBd7D5zsOFIktTjTBKSpCZZoCRJTfJ+UGNkuvs9SfOZ9zsbPbagJElNskBJkppkgZIkNckCJUlqkoMk1De/ZB4/DqzRXLIFJUlqki0oSRogexoGxxaUJKlJFihJUpOa7OLbXRPZ5rEkjQdbUJKkJjXZgpKk2eaQ+vbYgpIkNamfW75/LMmWJHdO2rYwyY1J7umeDx1umJKkcdNPF9/HgQ8D/zJp2ypgQ1VdlmRVt/7uwYe35/wNgiTND9O2oKrqv4Af7bD5HGBNt7wGOHfAcUmSxtzefge1qKoe7pYfARbt6sAkK5NsTLJx69ate/l20vxmnkg7m/EgiaoqoHazf3VVLa2qpRMTEzN9O2leMk+kne1tgXo0yWKA7nnL4EKSJGnvfwe1DlgBXNY9Xz+wiCTNWD+/6XHAkFrXzzDzTwJfBY5NsjnJRfQK02uS3AOc1a1LkjQw07agquqCXew6c8CxaB5z+L+kPeVMEpKkJlmgJElNcrJYDcxMJtu0C1DjwgEs/bMFJUlqkgVKktQku/g0EuwClMaPLShJUpNGrgU107teetdMSa2zx6DHFpQkqUkWKElSk0aui0/aG3aZ7Mzu7tE1Lr+lsgUlSWqSBUqS1CQLlCSpSRYoSVKTHCShecEv/KX5xxaUJKlJM2pBJVkGXAHsA3y0qrz1uySNiWEPd9/rFlSSfYB/BF4LHA9ckOT4vY5EkqRJZtLFdwpwb1XdV1U/Bz4FnDOYsCRJ4y5VtXcnJsuBZVX1p936m4GXVdVbdzhuJbCyWz0W+O4uXvIFwGN7FczsM9bhGKVYYfp4H6uqZf280B7kST/v2xJjHY75FuuUuTL0UXxVtRpYPd1xSTZW1dJhxzMIxjocoxQrDDbefvNk0O87bMY6HOMS60y6+B4Cjpy0fkS3TZKkGZtJgfo6cEySo5LsB5wPrBtMWJKkcbfXXXxVtS3JW4Eb6A0z/1hVbZpBLH11bzTCWIdjlGKFuYt3lK6TsQ7HWMS614MkJEkaJmeSkCQ1yQIlSWpSEwUqybIk301yb5JVcx3PZEmOTHJzkruSbEpySbd9YZIbk9zTPR8617Ful2SfJN9Msr5bPyrJrd31XdsNaplzSQ5Jcm2S7yS5O8lprV7XJH/Z/fe/M8knkxwwF9e11VwxT4ZnnPNkzgvUCEyZtA14R1UdD5wKXNzFtwrYUFXHABu69VZcAtw9af1y4INVdTTwBHDRnES1syuAz1fVccAJ9GJu7romORz4C2BpVb2Y3qCg85nl69p4rpgnwzO+eVJVc/oATgNumLR+KXDpXMe1m3ivB15D75f+i7tti4HvznVsXSxH0PsHewawHgi9X3EvmOp6z2GcBwM/oBuoM2l7c9cVOBx4EFhIb+TreuAPZ/u6jlKumCcDi3Os82TOW1A890dtt7nb1pwkS4CTgFuBRVX1cLfrEWDRHIW1ow8B7wKe7dYPA56sqm3deivX9yhgK/DPXTfLR5McSIPXtaoeAv4e+CHwMPAUcBuzf11HIlfMk4Ea6zxpoUCNhCQHAZ8B3lZVP568r3ofDeZ8vH6Ss4EtVXXbXMfShwXAS4GPVNVJwE/ZoZuioet6KL2JkI8CfgM4EOhrjr1xY54M3FjnSQsFqvkpk5LsSy/pPlFVn+02P5pkcbd/MbBlruKb5HTgDUnupze7/Bn0+q8PSbL9R9mtXN/NwOaqurVbv5ZeIrZ4Xc8CflBVW6vqF8Bn6V3r2b6uTeeKeTIUY50nLRSopqdMShLgKuDuqvrApF3rgBXd8gp6fe5zqqouraojqmoJvet4U1VdCNwMLO8OayXWR4AHkxzbbToTuIsGryu9LotTk/xq9+9he6yzfV2bzRXzZDjGPk/m+ou17ouz1wHfA74PvGeu49khtlfQaz7fAdzePV5Hr896A3AP8EVg4VzHukPcvw+s75Z/C/gacC/waWD/uY6vi+tEYGN3bf8dOLTV6wq8D/gOcCdwNbD/XFzXVnPFPBlqjGObJ051JElqUgtdfJIk7cQCJUlqkgVKktQkC5QkqUkWKElSkyxQ80CSc5NUkuPmOhapZebKaLFAzQ8XAF/uniXtmrkyQixQI66b++wV9KawP7/b9rwkV3b3j7kxyX8kWd7tOznJfya5LckN26dLkeY7c2X0WKBG3zn07hXzPeDxJCcDfwQsoXfPoDfTm+J++1xp/wAsr6qTgY8BfzsXQUtzwFwZMQumP0SNu4DeRJfQm/jyAnr/XT9dVc8CjyS5udt/LPBi4MbeVFnsQ29afGkcmCsjxgI1wpIspDcT80uSFL0kKuC6XZ0CbKqq02YpRKkJ5sposotvtC0Hrq6q36yqJVV1JL27b/4IeGPXv76I3oSY0LsL50SSX3ZjJHnRXAQuzTJzZQRZoEbbBez8CfAzwK/Tu4/MXcC/At8Anqqqn9NL1MuTfIvejNMvn71wpTljrowgZzOfp5IcVFVPJzmM3lT3p1fv3jKSJjFX2uV3UPPX+iSHAPsBf2PCSbtkrjTKFpQkqUl+ByVJapIFSpLUJAuUJKlJFihJUpMsUJKkJv0fMTNqo2Y+hAQAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x216 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uy6MPZs7S3pF"
      },
      "source": [
        "#Numerical 과 Ordinal features의 상관관계\n",
        "- 단일 플롯을 사용하여 연관관계를 알아내기 위해 여러 feature 들을 하나로 합칠 수 있다. ==> numerical 과 categorical features(중에서도 숫자값을 가지는)를 합치면 된다.\n",
        "\n",
        "#Observations.\n",
        "- 대다수의 승객들이 Pclass=3(하위계층)에 속했고, 사망하였다. 우리가 내린 추측에 힘을 실어주는 근거.\n",
        "- Pclass=2 와 Pclass=3 에 속한 Infant 승객은 대부분 생존하였다. 이 또한 추측을 qualify 해주는 근거.\n",
        "- Pclass=1에 속한 승객들 대부분이 살아남았다. 할말하않.\n",
        "- Pclass 는 승객들의 나이 분포에 따라서 다른것으로 나타났다.\n",
        "\n",
        "# Decisions.\n",
        "- 이로써 Pclass 도 모델 트레이닝에 고려하기로 결정."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bRARh_xDS0DJ",
        "outputId": "45461baa-097a-4298-d737-7966feda75a1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        }
      },
      "source": [
        "# grid = sns.FacetGrid(train_df, col='Pclass', hue='Survived')\n",
        "grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', height=2.2, aspect=1.6)\n",
        "grid.map(plt.hist, 'Age', alpha=.5, bins=20)\n",
        "grid.add_legend();\n",
        "\n",
        "#Warning 메세지에 찍힌대로 size를 height로 수정하였다. 버전 문제인것같다."
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
            "  keep = (tmp_a >= first_edge)\n",
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
            "  keep &= (tmp_a <= last_edge)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N_TgPV3GVUDj"
      },
      "source": [
        "#categorical features 에서 상관관계 찾기.\n",
        "ㄱㄱㄱㄱㄱ!!!\n",
        "#Observations.\n",
        "- 여성 승객이 남성 승객보다 훨씬 높은 확률로 생존하였다. (추론의 근거가 됨. 뒤에부터는 추근으로 줄일거임.)\n",
        "- 익셉션이 발생했어요.! Embarked=C인 곳에서는 무슨 일이 있었길래 생존확률이 높게 나왔을까? -> 혹시 PClass 와의 연관 관계가 있을지도 모르겠다. -> 하지만 Pclass 의 생존률은 Embark의 생존률과 직접적 연관이 없는것으로 드러남. \n",
        "- C, Q 항구에서 탑승한 Pclass=3 의 남성이 Pclass=2 과 비교하여 나은 생존률을 보였다.\n",
        "- Pclass=3 의 남성 승객에 대해 그들이 탑승한 항구에 따라 생존률이 정말 달랐던 것으로 나타났다.\n",
        "\n",
        "#Decisions.\n",
        "- 모델 트레이닝에 Sex feature 를 추가하기로 했다.\n",
        "- 모델 트레이닝을 위해 Embarked feature 를 complete 한 뒤 추가하자."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nlsqlad3UyZB",
        "outputId": "c5e76816-01e4-4292-9dce-1a60e68923d9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 598
        }
      },
      "source": [
        "# grid = sns.FacetGrid(train_df, col='Embarked')\n",
        "grid = sns.FacetGrid(train_df, row='Embarked', height=2.2, aspect=1.6)\n",
        "grid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\n",
        "grid.add_legend()"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n",
            "  warnings.warn(warning)\n",
            "/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:650: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n",
            "  warnings.warn(warning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f9f589b8160>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 323.94x475.2 with 3 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nqjk72x4XK_6"
      },
      "source": [
        "#Categorical 과 numerical features 의 연관성 찾기\n",
        "다음의 feature 들을 고려해보자.\n",
        "- Embarked (Categorical non-numeric)\n",
        "- Sex (Categorical non-numeric)\n",
        "- Fare (Numeric continuous)\n",
        "- Survived (Categorical numeric).\n",
        "\n",
        "#Observations.\n",
        "- 높은 fare 를 지불한 승객들의 생존률이 높았다. 우리가 앞서 create 한 fare range에 대한 추측을 confirm 한다.\n",
        "- Port of embarkation은 생존률과 관계가 있다.\n",
        "\n",
        "#Decisions.\n",
        "- fare feature 는 연령대처럼 묶어서 사용하자."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d-qa4yFvXAYj",
        "outputId": "d8aa6810-ae27-4bdf-e7c5-e8b5a3aec5ba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 598
        }
      },
      "source": [
        "#grid = sns.FacetGrid(train_df, col='Embarked', hue='Survived', palette={0: 'k', 1: 'w'})\n",
        "grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\n",
        "grid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\n",
        "grid.add_legend()"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n",
            "  warnings.warn(warning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f9f587fd518>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W8Z8vNwPYNdg"
      },
      "source": [
        "#Wrangle data (데이터 뒤섞기)\n",
        "여기까지 우리의 데이터와 solution requirements를 토대로 몇가지 추론과 decisions 를 추려 모아보았다.\n",
        "#Correcting by dropping features\n",
        "- feature 를 줄여가면서 더 적은 데이터 포인트들을 다루게 되면 속도도 빨라지고 분석도 쉬워짐.\n",
        "- Cabin 과 Ticket feature 는 생존률에 큰 관여를 하지 않으므로 제외하자는 추측이 있었다.\n",
        "\n",
        "- "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vutTtU3ZOMo7",
        "outputId": "5fa3593a-4164-4e5c-d83b-95568a354286",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "print(\"drop Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n",
        "\n",
        "train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\n",
        "test_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "\n",
        "print(\"drop After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "drop Before (891, 12) (418, 11) (891, 12) (418, 11)\n",
            "drop After (891, 10) (418, 9) (891, 10) (418, 9)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DMlivy8irXGZ",
        "outputId": "6a1eb8fa-9a5c-4921-d8f3-4997e239e22d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "\"After\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('After', (891, 10), (418, 9), (891, 10), (418, 9))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bRD0oTRYrF66",
        "outputId": "4e657b3b-6dfb-4517-bfd9-336a2afe8e9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "source": [
        "\"성진\""
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'성진'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fKnV8f3SZiOn"
      },
      "source": [
        "#이미 있는 feature 추출해서 새 feature 만들어내기\n",
        "- dropping Name and PassengerId features를 제외(drop)해 버리기 전에 생존률이 title(Dr, Sir 등) 과 연관이 있는지 알아보고 싶다. 그리고 그 Titles 가 생존률에는 영향을 미쳤는지 알아보고 싶다.\n",
        "- 그 과정에서 정규식을 사용할 예정. (문자 + .(온점) 으로 끝나는 아이를 title 로 지정하여 분류/사용할 것.)\n",
        "\n",
        "#Observations.\n",
        "- 대부분의 title 이 나이 그룹과 정확하게 맞아 떨어졌다. (예를 들어 Master 타이틀은 나이 평균이 이 5year 이었다.)\n",
        "- 하지만 타이틀의 생존률과 나이그룹의 생존률은 조금 차이가 있었다. 특정 titles(Mme, Lady, Sir)는 대부분 생존했으나, 대부분 생존하지 못한 titles(Don, Rev, Jonkheer)도 있기 때문이다.\n",
        "\n",
        "# Decision.\n",
        "- 모델 트레이닝을 위해서 새로 만들어낸 Title feature 를 유지하기로 한다.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ntGzMtEbspSe"
      },
      "source": [
        "combine = [train_df,test_df]"
      ],
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A0GzN3DktVwW",
        "outputId": "119bdf31-951c-4464-d3d0-d375b983c42f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "for s in ['1','4','6']:\n",
        "    print(\"s=\",s)"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "s= 1\n",
            "s= 4\n",
            "s= 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N4VQSxqBZe-p",
        "outputId": "779cb3e3-bfdf-4cba-c278-530e7d445cd9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        }
      },
      "source": [
        "for dataset in combine:\n",
        "    #datsset??????==> combine[0]== train_df\n",
        "    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
        "\n",
        "pd.crosstab(train_df['Title'], train_df['Sex'])\n",
        "#train_df"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Sex</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Title</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Capt</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Countess</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Don</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Dr</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Jonkheer</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lady</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Major</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Master</th>\n",
              "      <td>0</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Miss</th>\n",
              "      <td>182</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mlle</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mme</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mr</th>\n",
              "      <td>0</td>\n",
              "      <td>517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mrs</th>\n",
              "      <td>125</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ms</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rev</th>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sir</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Sex       female  male\n",
              "Title                 \n",
              "Capt           0     1\n",
              "Col            0     2\n",
              "Countess       1     0\n",
              "Don            0     1\n",
              "Dr             1     6\n",
              "Jonkheer       0     1\n",
              "Lady           1     0\n",
              "Major          0     2\n",
              "Master         0    40\n",
              "Miss         182     0\n",
              "Mlle           2     0\n",
              "Mme            1     0\n",
              "Mr             0   517\n",
              "Mrs          125     0\n",
              "Ms             1     0\n",
              "Rev            0     6\n",
              "Sir            0     1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z__HpQFabQYL"
      },
      "source": [
        "몇 타이틀들은 그냥 name으로 대체하거나 \"Rare\"로 분류하여 제외하면 머리가 덜 아프다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OJYEUZixOMsv",
        "outputId": "a48feb6e-1bac-4f9c-d2eb-7ec9f3f39227",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        }
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['Title2'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n",
        " \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
        "\n",
        "    dataset['Title2'] = dataset['Title'].replace('Mlle', 'Miss')\n",
        "    dataset['Title2'] = dataset['Title'].replace('Ms', 'Miss')\n",
        "    dataset['Title2'] = dataset['Title'].replace('Mme', 'Mrs')\n",
        "    dataset['Age2'] = dataset['Age']\n",
        "\n",
        "train_df[['Title2', 'Survived']].groupby(['Title2'], as_index=False).mean()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title2</th>\n",
              "      <th>Survived</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Master</td>\n",
              "      <td>0.575000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Miss</td>\n",
              "      <td>0.702703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Mr</td>\n",
              "      <td>0.156673</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Mrs</td>\n",
              "      <td>0.793651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Rare</td>\n",
              "      <td>0.347826</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Title2  Survived\n",
              "0  Master  0.575000\n",
              "1    Miss  0.702703\n",
              "2      Mr  0.156673\n",
              "3     Mrs  0.793651\n",
              "4    Rare  0.347826"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gLTi5pJObif1"
      },
      "source": [
        "categorical 한 titles 을 ordinal(순서적인 것)으로 표현할수있다.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fv4yGc1cbgKj",
        "outputId": "bb150a8e-8030-4f0c-a62b-91a54b91ce77",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        }
      },
      "source": [
        "title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n",
        "for dataset in combine:\n",
        "    dataset['Title2'] = dataset['Title2'].map(title_mapping)\n",
        "    dataset['Title2'] = dataset['Title2'].fillna(0)\n",
        "\n",
        "train_df.head()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>Sex2</th>\n",
              "      <th>Title2</th>\n",
              "      <th>Age2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>Mr</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>female</td>\n",
              "      <td>3</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>Miss</td>\n",
              "      <td>female</td>\n",
              "      <td>2</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>female</td>\n",
              "      <td>3</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>Mr</td>\n",
              "      <td>male</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   PassengerId  Survived  Pclass  ...    Sex2 Title2  Age2\n",
              "0            1         0       3  ...    male      1  22.0\n",
              "1            2         1       1  ...  female      3  38.0\n",
              "2            3         1       3  ...  female      2  26.0\n",
              "3            4         1       1  ...  female      3  35.0\n",
              "4            5         0       3  ...    male      1  35.0\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ycbw8Pq9bzFe"
      },
      "source": [
        "위의 작업을 해 주었으니 맘 놓고 Name feature 를 모든 데이터셋에서 drop 해 주자.\n",
        "<br>\n",
        "training dataset 의 PassengerId feature도 필요하지 않아 보인다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3S9z9KuWbxQe",
        "outputId": "808aed71-c2ed-4c14-b024-b942fa4b8506",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\n",
        "test_df = test_df.drop(['Name'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "train_df.shape, test_df.shape"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((891, 12), (418, 12))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4mvdVxwcQjS"
      },
      "source": [
        "#categorical feature 변환시키기.\n",
        "- 이제 String 타입을 numerical values 로 변환 시키는 작업을 해야 한다. 이 작업은 대부분의 모델 알고리즘을 사용하기 위해 필수로 수행되어야 한다.\n",
        "<br>\n",
        "Sex feature를 시작으로 Gender라는 새 feature를 만들어보자: female 이면 1, male 이면 0 값을 가진다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sFC7Q167cN06",
        "outputId": "46aaf08d-4690-4935-9ce4-f63bc62edd0a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        }
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['Sex2'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n",
        "\n",
        "train_df.head()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "      <th>Title</th>\n",
              "      <th>Sex2</th>\n",
              "      <th>Title2</th>\n",
              "      <th>Age2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>Mr</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>22.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>38.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>Miss</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>Mrs</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>Mr</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Survived  Pclass     Sex   Age  SibSp  ...  Embarked  Title Sex2 Title2  Age2\n",
              "0         0       3    male  22.0      1  ...         S     Mr    0      1  22.0\n",
              "1         1       1  female  38.0      1  ...         C    Mrs    1      3  38.0\n",
              "2         1       3  female  26.0      0  ...         S   Miss    1      2  26.0\n",
              "3         1       1  female  35.0      1  ...         S    Mrs    1      3  35.0\n",
              "4         0       3    male  35.0      0  ...         S     Mr    0      1  35.0\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oelDmGW5dAY9"
      },
      "source": [
        "#numerical continuous feature 완성하기.\n",
        "- 널값 채워넣는 작업 하기. Age feature 부터 시작해볼까?\n",
        "- numerical continuous feature 를 채워 넣는데는 3가지 방법이 있다고 함. \n",
        "<br>이제 번역 잠시 쉽니다....\n",
        "\n",
        "A simple way is to generate random numbers between mean and standard deviation.\n",
        "\n",
        "More accurate way of guessing missing values is to use other correlated features. In our case we note correlation among Age, Gender, and Pclass. Guess Age values using median values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on...\n",
        "\n",
        "Combine methods 1 and 2. So instead of guessing age values based on median, use random numbers between mean and standard deviation, based on sets of Pclass and Gender combinations.\n",
        "\n",
        "Method 1 and 3 will introduce random noise into our models. The results from multiple executions might vary. We will prefer method 2."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Dysp2Tmc9Ns",
        "outputId": "0d101643-253e-456d-9dae-2aa5e89eeaab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        }
      },
      "source": [
        "# grid = sns.FacetGrid(train_df, col='Pclass', hue='Gender')\n",
        "grid = sns.FacetGrid(train_df, row='Pclass', col='Sex2', size=2.2, aspect=1.6)\n",
        "grid.map(plt.hist, 'Age2', alpha=.5, bins=20)\n",
        "grid.add_legend()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
            "  warnings.warn(msg, UserWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
            "  keep = (tmp_a >= first_edge)\n",
            "/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
            "  keep &= (tmp_a <= last_edge)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7f6260e73f28>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 514.88x475.2 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6Qgys2CVbxdE",
        "outputId": "4a0547e2-32d4-4236-aae7-73c092fb479d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "guess_ages = np.zeros((2,3))\n",
        "guess_ages"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0.],\n",
              "       [0., 0., 0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "puOvbgILdq0z"
      },
      "source": [
        "이제 6가지 Combination의 추측 나이를 계산하기 위해서\n",
        "<br>\n",
        "Sex (0 or 1) 와 Pclass (1, 2, 3) 를 iterate 해줍니다.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0Ocj69ZdpNz",
        "outputId": "50aea916-1dde-4e57-8553-62e027f8a9ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "for dataset in combine:\n",
        "   \n",
        "    for i in range(0, 2):\n",
        "       \n",
        "        for j in range(0, 3):\n",
        "  \n",
        "                    #    dataset[i]                                                 ['Age']\n",
        "            guess_df = dataset[(dataset['Sex2'] == i) & (dataset['Pclass'] == j+1)]['Age2'].dropna()\n",
        "           \n",
        "            # age_mean = guess_df.mean()\n",
        "            # age_std = guess_df.std()\n",
        "            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n",
        "\n",
        "            age_guess = guess_df.median()\n",
        "\n",
        "            # Convert random age float to nearest .5 age\n",
        "            guess_ages[i,j] = int( age_guess/0.5 + 0.5 ) * 0.5\n",
        "          \n",
        "            \n",
        "    for i in range(0, 2):\n",
        "        for j in range(0, 3):\n",
        "            dataset.loc[ (dataset.Age2.isnull()) & (dataset.Sex2 == i) & (dataset.Pclass == j+1),'Age2'] = guess_ages[i,j]\n",
        "\n",
        "    dataset['Age2'] = dataset['Age2'].astype(int)\n",
        "\n",
        "train_df['Age'],train_df['Age2']"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0      22.0\n",
              " 1      38.0\n",
              " 2      26.0\n",
              " 3      35.0\n",
              " 4      35.0\n",
              "        ... \n",
              " 886    27.0\n",
              " 887    19.0\n",
              " 888     NaN\n",
              " 889    26.0\n",
              " 890    32.0\n",
              " Name: Age, Length: 891, dtype: float64, 0      22\n",
              " 1      38\n",
              " 2      26\n",
              " 3      35\n",
              " 4      35\n",
              "        ..\n",
              " 886    27\n",
              " 887    19\n",
              " 888    21\n",
              " 889    26\n",
              " 890    32\n",
              " Name: Age2, Length: 891, dtype: int64)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dM-AOhPldv2N"
      },
      "source": [
        "AgeBands 를 만들어서 생존률과 상관관계를 결정합니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BOnuxZZPbxfx"
      },
      "source": [
        "train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\n",
        "train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XS6BFEXpdzkM"
      },
      "source": [
        "Age 를 아래의 bands를 바탕으로 ordinal 로 바꿔줍니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "co7loZQ1dxjn"
      },
      "source": [
        "for dataset in combine:    \n",
        "    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n",
        "    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n",
        "    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n",
        "    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n",
        "    dataset.loc[ dataset['Age'] > 64, 'Age']\n",
        "train_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6jYz16qsd3P6"
      },
      "source": [
        "AgeBand feature 는 삭제할 수 없습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zAC_ICYPd1St"
      },
      "source": [
        "train_df = train_df.drop(['AgeBand'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "train_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nJtcxM3jd7EX"
      },
      "source": [
        "#Create new feature combining existing features\n",
        "전에 언급했던, Parch 랑 SibSp 컴바인해서 패밀리사이즈라는 새 feature 만들기.\n",
        "<br>\n",
        "We can create a new feature for FamilySize which combines Parch and SibSp. This will enable us to drop Parch and SibSp from our datasets."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d69156Tvd5Cx"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n",
        "\n",
        "train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mY2uLVNjeDdU"
      },
      "source": [
        "IsAlone 이라는 feature 를 만들어 혼자 탑승한 사람 구별하기. <br>\n",
        "We can create another feature called IsAlone."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0DLVO5uad9uS"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['IsAlone'] = 0\n",
        "    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n",
        "\n",
        "train_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E755T5GdeH4H"
      },
      "source": [
        "IsAlone 을 남겨두고 Parch, Sibsp, FamilySize features 모두 드롭해버리기."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "38_2WkpbeGbS"
      },
      "source": [
        "train_df = train_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n",
        "test_df = test_df.drop(['Parch', 'SibSp', 'FamilySize'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "\n",
        "train_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJNplgZXeMVS"
      },
      "source": [
        "이제 Pclass 와 Age를 합쳐서 새로운 feature 를 만들어보자. <br>\n",
        "We can also create an artificial feature combining Pclass and Age."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lUoLKVDNd9xP"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['Age*Class'] = dataset.Age * dataset.Pclass\n",
        "\n",
        "train_df.loc[:, ['Age*Class', 'Age', 'Pclass']].head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "58CkvzH7eQsS"
      },
      "source": [
        "#categorical feature 완성하기.\n",
        "트레이닝 데이터셋에 2 군데 Embark 관련해서 missing value 있는데, <br>\n",
        "이거를 흔한 발생빈도? 에 근거하여 채워넣기로 함 <br>\n",
        "Embarked feature takes S, Q, C values based on port of embarkation. Our training dataset has two missing values. We simply fill these with the most common occurance."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OWFj33U7eOzS"
      },
      "source": [
        "freq_port = train_df.Embarked.dropna().mode()[0]\n",
        "freq_port"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9TI_DDFd1V7"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n",
        "    \n",
        "train_df[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5wWpmboMeWFP"
      },
      "source": [
        "Converting categorical feature to numeric\n",
        "We can now convert the EmbarkedFill feature by creating a new numeric Port feature."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ANwArzmGd1Yl"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n",
        "\n",
        "train_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bwn-NXvdeZrD"
      },
      "source": [
        "#빠르게 numeric feature 완성하고 convert 하기.\n",
        "이제 테스트 데이터셋에 평균(mode)값 사용해 가장 빈도수가 높은 feature 를 구해서 한 군데 비어있는 Fare feature 를 채워넣자.\n",
        "<br>\n",
        "그리고 나서 소숫점 2자리까지만 표현하도록 하겠음. <br>\n",
        "We can now complete the Fare feature for single missing value in test dataset using mode to get the value that occurs most frequently for this feature. We do this in a single line of code.\n",
        "\n",
        "Note that we are not creating an intermediate new feature or doing any further analysis for correlation to guess missing feature as we are replacing only a single value. The completion goal achieves desired requirement for model algorithm to operate on non-null values.\n",
        "\n",
        "We may also want round off the fare to two decimals as it represents currency."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TSwvbG48dxmi"
      },
      "source": [
        "test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n",
        "test_df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oNB_lWecedpb"
      },
      "source": [
        "We can not create FareBand."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wA2QGA_Mdxpy"
      },
      "source": [
        "train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\n",
        "train_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ptd6ROzgei1E"
      },
      "source": [
        "Fare feature 를 FareBank 참고하여 ordinal 로 변경하기.\n",
        "Convert the Fare feature to ordinal values based on the FareBand."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UlXM-wCvehSn"
      },
      "source": [
        "for dataset in combine:\n",
        "    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n",
        "    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n",
        "    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n",
        "    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n",
        "    dataset['Fare'] = dataset['Fare'].astype(int)\n",
        "\n",
        "train_df = train_df.drop(['FareBand'], axis=1)\n",
        "combine = [train_df, test_df]\n",
        "    \n",
        "train_df.head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IbBAAsfeemZY"
      },
      "source": [
        "And the test dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_rSVjcPaehWk"
      },
      "source": [
        "test_df.head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V5SovVEseqvT"
      },
      "source": [
        "#모델과 예측, 그리고 문제 해결.\n",
        "\n",
        "이제 훈련모델을 위한 준비는 모두 끝났습니다.<br>\n",
        "Now we are ready to train a model and predict the required solution. There are 60+ predictive modelling algorithms to choose from. We must understand the type of problem and solution requirement to narrow down to a select few models which we can evaluate. Our problem is a classification and regression problem. We want to identify relationship between output (Survived or not) with other variables or features (Gender, Age, Port...). We are also perfoming a category of machine learning which is called supervised learning as we are training our model with a given dataset. With these two criteria - Supervised Learning plus Classification and Regression, we can narrow down our choice of models to a few. These include:\n",
        "<br>\n",
        "뭐 어쩌구 저쩌구 하는 모델이 많지만 우리는 아래의 모델들을 사용하여 예측 및 문제해결을 해보겠습니다.\n",
        "<br>\n",
        "- Logistic Regression\n",
        "- KNN or k-Nearest Neighbors\n",
        "- Support Vector Machines\n",
        "- Naive Bayes classifier\n",
        "- Decision Tree\n",
        "- Random Forrest\n",
        "- Perceptron\n",
        "- Artificial neural network\n",
        "- RVM or Relevance Vector Machine"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AgbjCPtYehZu"
      },
      "source": [
        "X_train = train_df.drop(\"Survived\", axis=1)\n",
        "Y_train = train_df[\"Survived\"]\n",
        "X_test  = test_df.drop(\"PassengerId\", axis=1).copy()\n",
        "X_train.shape, Y_train.shape, X_test.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7p1b5kCze4gS"
      },
      "source": [
        "#로지스틱 회귀란\n",
        "Logistic Regression is a useful model to run early in the workflow. Logistic regression measures the relationship between the categorical dependent variable (feature) and one or more independent variables (features) by estimating probabilities using a logistic function, which is the cumulative logistic distribution. Reference Wikipedia.\n",
        "\n",
        "Note the confidence score generated by the model based on our training dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cNMlBxvOehet"
      },
      "source": [
        "# Logistic Regression\n",
        "\n",
        "logreg = LogisticRegression()\n",
        "logreg.fit(X_train, Y_train)\n",
        "Y_pred = logreg.predict(X_test)\n",
        "acc_log = round(logreg.score(X_train, Y_train) * 100, 2)\n",
        "acc_log"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8eLRvY_Ne8Wi"
      },
      "source": [
        "#Logistic Regreession\n",
        "We can use Logistic Regression to validate our assumptions and decisions for feature creating and completing goals. This can be done by calculating the coefficient of the features in the decision function.\n",
        "\n",
        "Positive coefficients increase the log-odds of the response (and thus increase the probability), and negative coefficients decrease the log-odds of the response (and thus decrease the probability).\n",
        "\n",
        "Sex is highest positivie coefficient, implying as the Sex value increases (male: 0 to female: 1), the probability of Survived=1 increases the most.\n",
        "Inversely as Pclass increases, probability of Survived=1 decreases the most.\n",
        "This way Age*Class is a good artificial feature to model as it has second highest negative correlation with Survived.\n",
        "So is Title as second highest positive correlation."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xVcMjBXle6YB"
      },
      "source": [
        "coeff_df = pd.DataFrame(train_df.columns.delete(0))\n",
        "coeff_df.columns = ['Feature']\n",
        "coeff_df[\"Correlation\"] = pd.Series(logreg.coef_[0])\n",
        "\n",
        "coeff_df.sort_values(by='Correlation', ascending=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AuTdbBtPfGdB"
      },
      "source": [
        "#Support Vector Machines 사용 (분류와 회귀 분석을 합친 지도학습 모델임..!)\n",
        "Next we model using Support Vector Machines which are  with associated learning algorithms that analyze data used for classification and regression analysis. Given a set of training samples, each marked as belonging to one or the other of two categories, an SVM training algorithm builds a model that assigns new test samples to one category or the other, making it a non-probabilistic binary linear classifier. Reference Wikipedia.\n",
        "\n",
        "Note that the model generates a confidence score which is higher than Logistics Regression model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uvlTTRXZe6iT"
      },
      "source": [
        "# Support Vector Machines\n",
        "\n",
        "svc = SVC()\n",
        "svc.fit(X_train, Y_train)\n",
        "Y_pred = svc.predict(X_test)\n",
        "acc_svc = round(svc.score(X_train, Y_train) * 100, 2)\n",
        "acc_svc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FU6PqsZMfKtn"
      },
      "source": [
        "#KNN\n",
        "패턴 인식에서 KNN 은 분류 및 회귀에 사용되는 비모수 적 방법이라고 하던데...<br>\n",
        "비모수 통계는 통계학에서 모수에 대한 가정을 전제로 하지 않고 모집단의 형태에 관계없이 주어진 데이터에서 직접 확률을 계산하여 통계학적 검정을 하는 분석법이라고 합니다.\n",
        "\n",
        "In pattern recognition, the k-Nearest Neighbors algorithm (or k-NN for short) is a non-parametric method used for classification and regression. A sample is classified by a majority vote of its neighbors, with the sample being assigned to the class most common among its k nearest neighbors (k is a positive integer, typically small). If k = 1, then the object is simply assigned to the class of that single nearest neighbor. Reference Wikipedia.\n",
        "\n",
        "KNN confidence score is better than Logistics Regression but worse than SVM."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ESym5ie-ehhh"
      },
      "source": [
        "knn = KNeighborsClassifier(n_neighbors = 3)\n",
        "knn.fit(X_train, Y_train)\n",
        "Y_pred = knn.predict(X_test)\n",
        "acc_knn = round(knn.score(X_train, Y_train) * 100, 2)\n",
        "acc_knn"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O2V-LvmWf02A"
      },
      "source": [
        "# Naive Bayes Classifiers\n",
        "특성들 사이의 독립을 가정하는 베이즈 정리를 적용한 확률 분류기 입니다.\n",
        "In machine learning, naive Bayes classifiers are a family of simple probabilistic classifiers based on applying Bayes' theorem with strong (naive) independence assumptions between the features. Naive Bayes classifiers are highly scalable, requiring a number of parameters linear in the number of variables (features) in a learning problem. Reference Wikipedia.\n",
        "\n",
        "The model generated confidence score is the lowest among the models evaluated so far."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZsoizxllehmR"
      },
      "source": [
        "# Gaussian Naive Bayes\n",
        "\n",
        "gaussian = GaussianNB()\n",
        "gaussian.fit(X_train, Y_train)\n",
        "Y_pred = gaussian.predict(X_test)\n",
        "acc_gaussian = round(gaussian.score(X_train, Y_train) * 100, 2)\n",
        "acc_gaussian"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6Yd2n4xLf5Sv"
      },
      "source": [
        "#The Perceptron 퍼셉트론\n",
        "퍼셉트론은 선형 분류기의 일종으로 이진 분류기의 지도 학습을 위한 알고리즘이라고 합니다. <br>\n",
        "The Perceptron is an algorithm for supervised learning of binary classifiers (functions that can decide whether an input, represented by a vector of numbers, belongs to some specific class or not). It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector. The algorithm allows for online learning, in that it processes elements in the training set one at a time. Reference Wikipedia."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ayqtLCjsf3Ut"
      },
      "source": [
        "# Perceptron\n",
        "\n",
        "perceptron = Perceptron()\n",
        "perceptron.fit(X_train, Y_train)\n",
        "Y_pred = perceptron.predict(X_test)\n",
        "acc_perceptron = round(perceptron.score(X_train, Y_train) * 100, 2)\n",
        "acc_perceptron"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rQ30AL7Ff3Yk"
      },
      "source": [
        "# Linear SVC\n",
        "\n",
        "linear_svc = LinearSVC()\n",
        "linear_svc.fit(X_train, Y_train)\n",
        "Y_pred = linear_svc.predict(X_test)\n",
        "acc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\n",
        "acc_linear_svc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D49JaSodf3bv"
      },
      "source": [
        "# Stochastic Gradient Descent\n",
        "\n",
        "sgd = SGDClassifier()\n",
        "sgd.fit(X_train, Y_train)\n",
        "Y_pred = sgd.predict(X_test)\n",
        "acc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\n",
        "acc_sgd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "36bMKXTugCZg"
      },
      "source": [
        "#Decision Tree\n",
        "결정 트리는 특징 (나뭇 가지)을 목표 값 (나무 잎)에 대한 결론에 매핑하는 예측 모델로 의사 결정 트리를 사용합니다.<br>\n",
        "모든 모델들 중에 가장 높은 정확도(86.76)를 보였네요.<br>\n",
        "This model uses a decision tree as a predictive model which maps features (tree branches) to conclusions about the target value (tree leaves). Tree models where the target variable can take a finite set of values are called classification trees; in these tree structures, leaves represent class labels and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. Reference Wikipedia.\n",
        "\n",
        "The model confidence score is the highest among models evaluated so far."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZzP6x6P_f3fn"
      },
      "source": [
        "# Decision Tree\n",
        "\n",
        "decision_tree = DecisionTreeClassifier()\n",
        "decision_tree.fit(X_train, Y_train)\n",
        "Y_pred = decision_tree.predict(X_test)\n",
        "acc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\n",
        "acc_decision_tree"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xCfzhb-ogG-i"
      },
      "source": [
        "#Random Forests\n",
        "랜덤 포레스트는 분류, 회귀 및 기타 작업을 위한 앙상블 학습 방법입니다.<br>\n",
        "앙상블 학습은 여러 개의 결정 트리(Decision Tree)를 결합하여 하나의 결정 트리보다 더 좋은 성능을 내는 머신러닝 기법을 말함.<br>\n",
        "The next model Random Forests is one of the most popular. Random forests or random decision forests are an ensemble learning method for classification, regression and other tasks, that operate by constructing a multitude of decision trees (n_estimators=100) at training time and outputting the class that is the mode of the classes (classification) or mean prediction (regression) of the individual trees. Reference Wikipedia.\n",
        "\n",
        "The model confidence score is the highest among models evaluated so far. We decide to use this model's output (Y_pred) for creating our competition submission of results."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tR9uhXlMf3i3"
      },
      "source": [
        "# Random Forest\n",
        "\n",
        "random_forest = RandomForestClassifier(n_estimators=100)\n",
        "random_forest.fit(X_train, Y_train)\n",
        "Y_pred = random_forest.predict(X_test)\n",
        "random_forest.score(X_train, Y_train)\n",
        "acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\n",
        "acc_random_forest"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ht6H0dXgLqT"
      },
      "source": [
        "#모델 평가의 시간.\n",
        "이제 모든 모델에 대한 평가 순위를 매겨 문제에 가장 적합한 모델을 선택할 수 있습니다.<br> Decision Tree와 Random Forest의 점수는 동일하지만, 우리는 의사 결정 트리의 훈련 세트에 과적합(overfitting)하는 현상(habit)을 수정하기 위해 Random Forest를 사용하겠습니다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PSvu9ERKf3lf"
      },
      "source": [
        "models = pd.DataFrame({\n",
        "    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n",
        "              'Random Forest', 'Naive Bayes', 'Perceptron', \n",
        "              'Stochastic Gradient Decent', 'Linear SVC', \n",
        "              'Decision Tree'],\n",
        "    'Score': [acc_svc, acc_knn, acc_log, \n",
        "              acc_random_forest, acc_gaussian, acc_perceptron, \n",
        "              acc_sgd, acc_linear_svc, acc_decision_tree]})\n",
        "models.sort_values(by='Score', ascending=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IKDBJQF5f3qv"
      },
      "source": [
        "submission = pd.DataFrame({\n",
        "        \"PassengerId\": test_df[\"PassengerId\"],\n",
        "        \"Survived\": Y_pred\n",
        "    })\n",
        "# submission.to_csv('../output/submission.csv', index=False)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "41hITA85gkUM"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AGM96COBggYi"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QWSx_oweggmc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xjXscy09f3vc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}